diff --git a/src/SuperimposeMesh/src/SICAD.cpp b/src/SuperimposeMesh/src/SICAD.cpp
index fe83ab4..04afa3d 100644
--- a/src/SuperimposeMesh/src/SICAD.cpp
+++ b/src/SuperimposeMesh/src/SICAD.cpp
@@ -560,6 +560,7 @@ bool SICAD::superimpose
     cv::flip(ogl_pixel, img, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -685,6 +686,7 @@ bool SICAD::superimpose
     cv::flip(ogl_pixel, img, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -835,6 +837,7 @@ bool SICAD::superimpose
     glReadPixels(0, framebuffer_height_ - tile_img_height_, tile_img_width_, tile_img_height_, GL_BGR, GL_UNSIGNED_BYTE, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -947,6 +950,7 @@ bool SICAD::superimpose
     glReadPixels(0, framebuffer_height_ - tile_img_height_, tile_img_width_, tile_img_height_, GL_BGR, GL_UNSIGNED_BYTE, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -1067,6 +1071,7 @@ bool SICAD::superimpose
     glReadPixels(0, 0, framebuffer_width_, framebuffer_height_, GL_BGR, GL_UNSIGNED_BYTE, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -1192,6 +1197,7 @@ bool SICAD::superimpose
     glReadPixels(0, 0, framebuffer_width_, framebuffer_height_, GL_BGR, GL_UNSIGNED_BYTE, 0);
 
     /* Swap the buffers. */
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
 
     pollOrPostEvent();
@@ -1281,6 +1287,7 @@ bool SICAD::setProjectionMatrix
     glUniformMatrix4fv(glGetUniformLocation(shader_frame_->get_program(), "projection"), 1, GL_FALSE, glm::value_ptr(projection_));
     shader_frame_->uninstall();
 
+    glfwSwapInterval(0);
     glfwSwapBuffers(window_);
     glfwMakeContextCurrent(nullptr);
 
@@ -1351,8 +1358,8 @@ glm::mat4 SICAD::getViewTransformationMatrix(const double* cam_x, const double*
                                         static_cast<float>(cam_o[3]), glm::vec3(static_cast<float>(cam_o[0]), static_cast<float>(cam_o[1]), static_cast<float>(cam_o[2])));
 
     glm::mat4 view = glm::lookAt(glm::vec3(root_cam_t[3].x, root_cam_t[3].y, root_cam_t[3].z),
-                                 glm::vec3(root_cam_t[3].x, root_cam_t[3].y, root_cam_t[3].z) + glm::mat3(cam_to_root) * ogl_to_cam_ * glm::vec3(0.0f, 0.0f, -1.0f),
-                                 glm::mat3(cam_to_root) * ogl_to_cam_ * glm::vec3(0.0f, 1.0f, 0.0f));
+                                 glm::vec3(root_cam_t[3].x, root_cam_t[3].y, root_cam_t[3].z) + glm::mat3(cam_to_root) * ogl_to_cam_ * glm::vec3(0.0f, 0.0f, 1.0f),
+                                 glm::mat3(cam_to_root) * ogl_to_cam_ * glm::vec3(0.0f, -1.0f, 0.0f));
 
     return view;
 }
